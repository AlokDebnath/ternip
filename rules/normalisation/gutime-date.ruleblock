Block-Type: run-until-success

---

Type: date
Tokenise: null
Match: (\d\d\d\d-?\d\d-?\d\d-?(T\d\d(:?\d\d)?(:?\d\d)?([\+\-]\d{1,4})?)?)
Value: date_to_iso({#1})

---

Type: date
Tokenise: null
Match: \d\d?[\/\.]\d\d?[\/\.]\d\d(\d\d)?
Value: date_to_iso({#0})

---

Type: date
Tokenise: null
Match: (\d{4})-(to-)(\d{4})
Value: {#1}/{#3}

---

Type: date
Tokenise: space
Match: ((\w+teen)\s+)?(twen|thir|for|fif|six|seven|eigh|nine)ties
Value: str(((10 * word_to_num[{#2}.lower()]) if {#2} != None and {#2}.lower() in word_to_num else 190) + decade_nums[{#3}.lower()])

---

Type: date
Tokenise: null
Match: \'(\d)0s
Guard: !years
Value: str((200 if int({#1}) < 3 else 190) + int({#1}))

---

Type: date
Tokenise: null
Match: (\d{3})0\'?s
Guard: !years
Value: {#1}

---

Type: date
Guard: !years
Guard: !(fool|<may~.+><day~.+>)
Match: <($ORDINAL_WORDS|$ORDINAL_NUMS)~.+><weekend~.+><(of|in)~.+><($MONTHS|$MONTH_ABBRS)>(<.*>)*<(\d{4}|\'\d\d)~.+>
Value: date_to_week(int(normalise_two_digit_year({#7})), month_to_num({#5}, ordinal_to_num({#1}) * 7 - 5)) + 'WE'

---

Type: date
Guard: !years
Guard: !(fool|<may~.+><day~.+>)
Match: <($ORDINAL_WORDS|$ORDINAL_NUMS)~.+><week~.+><(of|in)~.+><($MONTHS|$MONTH_ABBRS)>(<.*>)*<(\d{4}|\'\d\d)~.+>
Value: date_to_week(int(normalise_two_digit_year({#7})), month_to_num({#5}, ordinal_to_num({#1}) * 7 - 3))

---

Type: date
Tokenise: space
Guard: !years
Guard: !(fool|may\s+day)
Match: \b($MONTHS|$MONTH_ABBRS)\b.*?(\d{4}|\'\d\d)
Value: normalise_two_digit_year({#4}) + str(month_to_num({#1}))
---

Type: date
Tokenise: space
Guard: !years
Guard: !(fool|may\s+day)
Match: the\s+week\s+(of|in).*(\d\d?|$ORDINAL_WORDS).*\b($MONTHS|$MONTH_ABBRS)\b.*?(\d{4}|\'\d\d)
Value: date_to_week(int(normalise_two_digit_year({#7})), month_to_num({#4}), ordinal_to_num({#2}))
---

Type: date
Tokenise: space
Guard: !years
Guard: !(fool|may\s+day)
Match: (\d\d?|$ORDINAL_WORDS).*\b($MONTHS|$MONTH_ABBRS)\b.*?(\d{4}|\'\d\d)
Value: "%4d%02d%02d" % (int(normalise_two_digit_year({#6})), month_to_num({#3}), ordinal_to_num({#1}))

---

Type: date
Tokenise: space
Guard: !years
Guard: !(fool|may\s+day)
Match: the\s+week\s+(of|in).*\bides\b.*\b(mar(ch)?|may|july?|oct(ober)?)\b.*?(\d{4}|\'\d\d)
Value: date_to_week(int(normalise_two_digit_year({#5})), month_to_num({#2}), 15)

---

Type: date
Tokenise: space
Guard: !years
Guard: !(fool|may\s+day)
Match: \bides\b.*\b(mar(ch)?|may|july?|oct(ober)?)\b.*?(\d{4}|\'\d\d)
Value: "%4d%02d%02d" % (int(normalise_two_digit_year({#4})), month_to_num({#1}), 15)

---

Type: date
Tokenise: space
Guard: !years
Guard: !(fool|may\s+day)
Match: the\s+week\s+(of|in).*\bides\b.*\b($MONTHS|$MONTH_ABBRS)\b.*?(\d{4}|\'\d\d)
Value: date_to_week(int(normalise_two_digit_year({#5})), month_to_num({#2}), 13)

---

Type: date
Tokenise: space
Guard: !years
Guard: !(fool|may\s+day)
Match: \bides\b.*\b($MONTHS|$MONTH_ABBRS)\b.*?(\d{4}|\'\d\d)
Value: "%4d%02d%02d" % (int(normalise_two_digit_year({#4})), month_to_num({#1}), 13)


---

Type: date
Tokenise: space
Guard: !years
Guard: !(fool|may\s+day)
Match: the\s+week\s+(of|in).*\bnones\b.*\b(mar(ch)?|may|july?|oct(ober)?)\b.*?(\d{4}|\'\d\d)
Value: date_to_week(int(normalise_two_digit_year({#5})), month_to_num({#2}), 7)

---

Type: date
Tokenise: space
Guard: !years
Guard: !(fool|may\s+day)
Match: \bnones\b.*\b(mar(ch)?|may|july?|oct(ober)?)\b.*?(\d{4}|\'\d\d)
Value: "%4d%02d%02d" % (int(normalise_two_digit_year({#4})), month_to_num({#1}), 7)

---

Type: date
Tokenise: space
Guard: !years
Guard: !(fool|may\s+day)
Match: the\s+week\s+(of|in).*\bnones\b.*\b($MONTHS|$MONTH_ABBRS)\b.*?(\d{4}|\'\d\d)
Value: date_to_week(int(normalise_two_digit_year({#5})), month_to_num({#2}), 5)

---

Type: date
Tokenise: space
Guard: !years
Guard: !(fool|may\s+day)
Match: \bnones\b.*\b($MONTHS|$MONTH_ABBRS)\b.*?(\d{4}|\'\d\d)
Value: "%4d%02d%02d" % (int(normalise_two_digit_year({#4})), month_to_num({#1}), 5)

---

Type: date
Guard: !years
Match: $FIXED_HOLIDAYS(<.*>)*<(\d{4}|\'\d\d)~.+>
Guard: !eve
Value: normalise_two_digit_year({#3}) + fixed_holiday_date({#1})

---

Type: date
Guard: !years
Match: $FIXED_HOLIDAYS(<.*>)*<(\d{4}|\'\d\d)~.+>
Guard: eve
Value: offset_from_date(normalise_two_digit_year({#3}) + fixed_holiday_date({#1}), -1)

---

Type: date
Guard: !years
Match: <$NTH_DOW_HOLIDAYS~.>(<.*>)*<(\d{4}|\'\d\d)~.+>
Value: "%4d%02d%02d" % (int(normalise_two_digit_year({#3})), nth_dow_holiday_date[{#1}.lower()][0], nth_dow_to_date(nth_dow_holiday_date[{#1}.lower()][0], nth_dow_holiday_date[{#1}.lower()][1], nth_dow_holiday_date[{#1}.lower()][2], int(normalise_two_digit_year({#3}))))

---

Type: date
Guard: !years
Match: <$NTH_DOW_HOLIDAYS~.>(<.*>)*<(\d{4}|\'\d\d)~.+>
Value: "%4d%02d%02d" % (int(normalise_two_digit_year({#3})), nth_dow_holiday_date[{#1}.lower()][0], nth_dow_to_date(nth_dow_holiday_date[{#1}.lower()][0], nth_dow_holiday_date[{#1}.lower()][1], nth_dow_holiday_date[{#1}.lower()][2], int(normalise_two_digit_year({#3}))))

---

Type: date
Guard: !years
Match: <good~.+><friday~.+>(<.*>)*<(\d{4}|\'\d\d)~.+>
Value: offset_from_date(easter_date(normalise_two_digit_year({#2})), -3)

---

Type: date
Guard: !years
Match: (<shrove~.+><tuesday~.+>|<mardis~.+><gras~.+>)(<.*>)*<(\d{4}|\'\d\d)~.+>
Value: offset_from_date(easter_date(normalise_two_digit_year({#3})), -47)

---

Type: date
Guard: !years
Match: (<ash~.+><wednesday~.+>)(<.*>)*<(\d{4}|\'\d\d)~.+>
Value: offset_from_date(easter_date(normalise_two_digit_year({#3})), -46)

---

Type: date
Guard: !years
Match: (<palm~.+><sunday~.+>)(<.*>)*<(\d{4}|\'\d\d)~.+>
Value: offset_from_date(easter_date(normalise_two_digit_year({#3})), -7)

---

Type: date
Guard: !years
Match: (<easter~.+>)(<.*>)*<(\d{4}|\'\d\d)~.+>
Value: easter_date(normalise_two_digit_year({#3}))

---

Type: date
Guard: !years
Match: (spring|summer|autumn|fall|winter)(<.*>)*<(\d{4}|\'\d\d)~.+>
Value: normalise_two_digit_year({#3}) + season[{#1}.lower()]

---

Type: date
Guard: !years
Match: <(\d{4}|\'\d\d)~.+>
Value: normalise_two_digit_year({#1})

---

Type: date
Before-Guard: <(exact|precise).*>$
Deliminate-Numbers: true
Match: (<the~.+>|<a~.+>|NUM_START(.*)NUM_END)(<.*>)*<(while|year|month|moon|fortnight|week|day|decade|centur(y|ie)|time|long)s?~.+><ago~.+>(<.*>*<(today|tomorrow|yesterday|$DAYS)~.+>)?
Value: offset_from_date(compute_relative_date(cur_context, {#7}, -1), -1 * words_to_num({#1}), {#4}, True)

---

Type: date
After-Guard: ^<(exact|precise).*>
Deliminate-Numbers: true
Match: (<the~.+>|<a~.+>|NUM_START(.*)NUM_END)(<.*>)*<(while|year|month|moon|fortnight|week|day|decade|centur(y|ie)|time|long)s?~.+><ago~.+>(<.*>*<(today|tomorrow|yesterday|$DAYS)~.+>)?
Value: offset_from_date(compute_relative_date(cur_context, {#7}, -1), -1 * words_to_num({#1}), {#4}, True)

---

Type: date
Deliminate-Numbers: true
Match: (<the~.+>|<a~.+>|NUM_START(.*)NUM_END)(<.*>)*<(while|year|month|moon|fortnight|week|day|decade|centur(y|ie)|time|long)s?~.+><ago~.+><.*>*<(today|tomorrow|yesterday|$DAYS)~.+>
Value: offset_from_date(compute_relative_date(cur_context, {#6}, -1), -1 * words_to_num({#1}), {#4}, True)

---

Type: date
Deliminate-Numbers: true
Match: (<the~.+>|<a~.+>|NUM_START(.*)NUM_END)(<.*>)*<(while|year|month|moon|fortnight|week|day|decade|centur(y|ie)|time|long)s?~.+><ago~.+>
Value: offset_from_date(cur_context, -1 * words_to_num({#1}), {#4}, False)

---

Type: date
Before-Guard: <(exact|precise).*>$
Deliminate-Numbers: true
Match: (<the~.+>|<a~.+>|NUM_START(.*)NUM_END)(<.*>)*<(while|year|month|moon|fortnight|week|day|decade|centur(y|ie)|time|long)s?~.+><hence~.+>(<.*>*<(today|tomorrow|yesterday|$DAYS)~.+>)?
Value: offset_from_date(compute_relative_date(cur_context, {#7}, 1), words_to_num({#1}), {#4}, True)

---

Type: date
After-Guard: ^<(exact|precise).*>
Deliminate-Numbers: true
Match: (<the~.+>|<a~.+>|NUM_START(.*)NUM_END)(<.*>)*<(while|year|month|moon|fortnight|week|day|decade|centur(y|ie)|time|long)s?~.+><hence~.+>(<.*>*<(today|tomorrow|yesterday|$DAYS)~.+>)?
Value: offset_from_date(compute_relative_date(cur_context, {#7}, 1), words_to_num({#1}), {#4}, True)

---

Type: date
Deliminate-Numbers: true
Match: (<the~.+>|<a~.+>|NUM_START(.*)NUM_END)(<.*>)*<(while|year|month|moon|fortnight|week|day|decade|centur(y|ie)|time|long)s?~.+><hence~.+><.*>*<(today|tomorrow|yesterday|$DAYS)~.+>
Value: offset_from_date(compute_relative_date(cur_context, {#6}, 1), words_to_num({#1}), {#4}, True)

---

Type: date
Deliminate-Numbers: true
Match: (<the~.+>|<a~.+>|NUM_START(.*)NUM_END)(<.*>)*<(while|year|month|moon|fortnight|week|day|decade|centur(y|ie)|time|long)s?~.+><hence~.+>
Value: offset_from_date(cur_context, words_to_num({#1}), {#4}, False)

---

Type: date
Deliminate-Numbers: true
Match: <about~.+>(<the~.+>|<a~.+>|NUM_START(.*)NUM_END)(<.*>)*<(while|year|month|moon|fortnight|week|day|decade|centur(y|ie)|time|long)s?~.+><from~.+><(now|today|tomorrow|yesterday|$DAYS)~.+>
Value: offset_from_date(compute_relative_date(cur_context, {#6}, 1), words_to_num({#1}), {#4}, False)

---

Type: date
Before-Guard: <(exact|precise).*>$
Deliminate-Numbers: true
Match: (<the~.+>|<a~.+>|NUM_START(.*)NUM_END)(<.*>)*<(while|year|month|moon|fortnight|week|day|decade|centur(y|ie)|time|long)s?~.+><from~.+><(now|today|tomorrow|yesterday|$DAYS)~.+>
Value: offset_from_date(compute_relative_date(cur_context, {#6}, 1), words_to_num({#1}), {#4}, True)

---

Type: date
After-Guard: ^<(exact|precise).*>
Deliminate-Numbers: true
Match: (<the~.+>|<a~.+>|NUM_START(.*)NUM_END)(<.*>)*<(while|year|month|moon|fortnight|week|day|decade|centur(y|ie)|time|long)s?~.+><from~.+><(now|today|tomorrow|yesterday|$DAYS)~.+>
Value: offset_from_date(compute_relative_date(cur_context, {#6}, 1), words_to_num({#1}), {#4}, True)

---

Type: date
Deliminate-Numbers: true
Match: (<the~.+>|<a~.+>|NUM_START(.*)NUM_END)(<.*>)*<(while|year|month|moon|fortnight|week|day|decade|centur(y|ie)|time|long)s?~.+><from~.+><(now|today|tomorrow|yesterday|$DAYS)~.+>
Value: offset_from_date(compute_relative_date(cur_context, {#6}, 1), words_to_num({#1}), {#4}, True)

---

Type: date
Deliminate-Numbers: true
Match: (<the~.+>|<a~.+>|NUM_START(.*)NUM_END)(<.*>)*<(while|year|month|moon|fortnight|week|day|decade|centur(y|ie)|time|long)s?~.+><before~.+><last~.+>
Value: offset_from_date(cur_context, -1 * words_to_num({#1}), {#4}, False)

---

Type: date
Deliminate-Numbers: true
Match: (<the~.+>|<a~.+>|NUM_START(.*)NUM_END)(<.*>)*<(while|year|month|moon|fortnight|week|day|decade|centur(y|ie)|time|long)s?~.+><after~.+><next~.+>
Value: offset_from_date(cur_context, words_to_num({#1}), {#4}, False)

---

Type: date
Deliminate-Numbers: true
Match: <(while|year|month|moon|fortnight|week|day|decade|centur(y|ie)|time|long)s?~.+>(<hence~.+>|<after~.+><next~.+>|<from~.+><(now|today|tomorrow|yesterday|$DAYS)~.+>)
Value: 'FUTURE_REF'

---

Type: date
Deliminate-Numbers: true
Match: <(while|year|month|moon|fortnight|week|day|decade|centur(y|ie)|time|long)s?~.+>(<ago~.+>|<before~.+><last~.+>)
Value: 'PAST_REF'

---

Type: date
Match: <($ORDINAL_NUMS|$ORDINAL_WORDS)~.+>(<.*>)*<century~.*>
Value: str(ordinal_to_num({#1}) - 1)

---

Type: date
Match: ^<(now|current)~.*>$
Value: 'PRESENT_REF'

---

Type: date
Match: <future~.*>
Value: 'FUTURE_REF'

---

Type: date
Match: ^(<once~.+>|<medieval~.+>|<the~.+><past~.+>)$
Value: 'PAST_REF'

---

Type: date
Guard: morning
Tokenise: space
Guard: !\b(shrove|ash|good|palm|easter)\b
Match: ((every|every|each|alternate)\s+(other|$ORDINAL_WORDS|$ORDINAL_NUMS)?).*$DAYS
Value: 'XXXXWXX' + str(day_to_num({#6})) + 'TMO'
Change-Type: 'set'
Quant: {#1}

---

Type: date
Guard: afternoon
Tokenise: space
Guard: !\b(shrove|ash|good|palm|easter)\b
Match: ((every|every|each|alternate)\s+(other|$ORDINAL_WORDS|$ORDINAL_NUMS)?).*$DAYS
Value: 'XXXXWXX' + str(day_to_num({#6})) + 'TAF'
Change-Type: 'set'
Quant: {#1}

---

Type: date
Guard: evening
Tokenise: space
Guard: !\b(shrove|ash|good|palm|easter)\b
Match: ((every|every|each|alternate)\s+(other|$ORDINAL_WORDS|$ORDINAL_NUMS)?).*$DAYS
Value: 'XXXXWXX' + str(day_to_num({#6})) + 'TEV'
Change-Type: 'set'
Quant: {#1}

---

Type: date
Guard: night
Tokenise: space
Guard: !\b(shrove|ash|good|palm|easter)\b
Match: ((every|every|each|alternate)\s+(other|$ORDINAL_WORDS|$ORDINAL_NUMS)?).*$DAYS
Value: 'XXXXWXX' + str(day_to_num({#6})) + 'TNI'
Change-Type: 'set'
Quant: {#1}

---

Type: date
Match: ((every|every|each|alternate)\s+(other|$ORDINAL_WORDS|$ORDINAL_NUMS)?).*$DAYS
Tokenise: space
Guard: !\b(shrove|ash|good|palm|easter)\b
Value: 'XXXXWXX' + str(day_to_num({#6}))
Change-Type: 'set'
Quant: {#1}

---

Type: date
Match: (<(every|every|each|alternate)~.+>(<(other|$ORDINAL_WORDS|$ORDINAL_NUMS)~.+>)?)(<.*>)*(<(St\.|Saint)~.+>(<.*>)*<Day~.+>|<$NTH_DOW_HOLIDAYS~.+>|<$DAY_HOLIDAYS~.+>|$LUNAR_HOLIDAYS)
Value: 'P1Y'
Freq: '1D'
Change-Type: 'set'
Quant: {#1}

---

Type: date
Match: (<(every|every|each|alternate)~.+>(<(other|$ORDINAL_WORDS|$ORDINAL_NUMS)~.+>)?)(<.*>)*($FIXED_HOLIDAYS)
Value: 'XXXX' + fixed_holiday_date({#8})
Change-Type: 'set'
Quant: re.sub(r'<([^~]*)[^>]*>', r'\1', {#1})

---

Type: date
Match: ((every|every|each|alternate)\s+(other|$ORDINAL_WORDS|$ORDINAL_NUMS)?).*\b(spring|summer|winter|fall|autumn)s?\b
Tokenise: space
Value: 'XXXX' + season({#6})
Change-Type: 'set'
Quant: {#1}

---

Type: date
Match: ((every|each|alternate)\s+(other|$ORDINAL_WORDS|$ORDINAL_NUMS)?).*\b(minute|hour|day|week|month|year)s?\b
Tokenise: space
Value: 'P1' + units_to_gran({#6})
Change-Type: 'set'
Quant: {#1}

---

Type: date
Match: <every~.+>(<\d+~.+>|NUM_START.*NUM_END)<(minute|hour|day|week|month|year)s?~.+>
Deliminate-Numbers: True
Value: 'P' + str(words_to_num({#1})) + units_to_gran({#2})
Change-Type: 'set'
Quant: EVERY

---

Type: date
Match: (<every~.+>|<each~.+>|<alternate~.+>)
Change-Type: 'set'

---

Type: date
Match: bi(annual|year|month|week|dai|hour|night)ly
Value: 'P2' + units_to_gran({#1})

---

Type: date
Match: fortnightly
Value: 'P2W'

---

Type: date
Match: (annual|year|month|week|dai|hour|night)ly
Value: 'P1' + units_to_gran({#1})

---

Type: date
Match: biannual
Value: 'P2Y'

---

Type: date
Match: annual
Value: 'P1Y'

---

Type: date
Match: <day~.+><before~.+><yesterday~.+>
Value: offset_from_date(cur_context, -2)

---

Type: date
Match: <yesterday~.+>
Value: offset_from_date(cur_context, -1)

---

Type: date
Match: <($DAYS)~.+>(<.*>)*<($ORDINAL_NUMS|$ORDINAL_WORDS)~.+>
Guard: !<friday~.+><the~.+><(thirteen|13)th~.+>
Value: ('XXXXXX' if day_to_num({#1}) == date_to_dow(int(cur_context[:4]), int(cur_context[4:6]), ordinal_to_num({#4})) else cur_context[:6]) + str(ordinal_to_num({#4}))

---

Type: date
Match: today
Before-Guard: <(said|later|earlier)~.+>$
Value: cur_context

---

Type: date
Match: today
After-Guard: ^<(for|at|on)~.+>
Value: cur_context

---

Type: date
Match: today
Before-Guard: <(am|is|are|were|was|that|of|in)~.+>$
Value: 'PRESENT_REF'

---

Type: date
Match: today
After-Guard: <(many|here|most)~.+>
Value: 'PRESENT_REF'

---

Type: date
Match: today
Before-Guard: <(many|here|most)~.+>
Value: 'PRESENT_REF'

---

Type: date
Match: today
Value: cur_context[:8]

---

Type: date
Match: <this~.+><morning~.+>
Value: cur_context[:8] + 'TMO'

---

Type: date
Match: <this~.+><afternoon~.+>
Value: cur_context[:8] + 'TAF'

---

Type: date
Match: <this~.+><evening~.+>
Value: cur_context[:8] + 'TEV'

---

Type: date
Match: <(tonight|tonite)~.+>
Value: cur_context[:8] + 'TNI'

---

Type: date
Match: <day~.+><after~.+><tomorrow~.+>
Value: offset_from_date(cur_context, 2)

---

Type: date
Match: <tomorrow~.+>
Value: offset_from_date(cur_context, 1)